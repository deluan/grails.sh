#!/bin/bash
# Original Version: http://github.com/deluan

CMD=`basename $0`                              # grails-debug
TOOL=`echo $CMD | cut -f 1 -d "-"`             # grails
TOOL_UPPER=`echo $TOOL | tr '[a-z]' '[A-Z]'`   # GRAILS
TOOL_HOME="\$${TOOL_UPPER}_HOME"               # $GRAILS_HOME
TOOL_HOME=`eval echo $TOOL_HOME`               # /opt/grails/grails-2.2.3

if [ -z $TOOL_HOME ]; then
  TOOL_HOME="\$${TOOL_UPPER}_DEFAULT_HOME"     # GRAILS_DEFAULT_HOME
  TOOL_HOME=`eval echo $TOOL_HOME`
	# DO NOT SET GRAILS_HOME env. var if you use more than one Grails version,
  # as this can lead to problems.
fi

# Check if TOOL_HOME is set
if [ -z "TOOL_HOME" -o ! -d "$TOOL_HOME" ]; then
	echo "Error: ${TOOL_UPPER}_DEFAULT_HOME or ${TOOL_UPPER}_HOME not set"
	exit 2
fi

# From: https://github.com/alxndrsn/grails.sh/blob/master/dirname
dirname()
{
	echo $1 | sed -e "s/[^\/\\]*$//" -e "s/^$/./"
}

# Extract the default version and base path from TOOL_HOME
DEFAULT_VERSION=`basename $TOOL_HOME | cut -f 2 -d "-"`
BASE_TOOL_PATH=`dirname $TOOL_HOME`
APP_PROP="application.properties"
APP_PROP3="gradle.properties"

read_app_version()
{
	if [ -z "$VERSION" -a -f "$APP_PROP" ]; then
    awk -F'=' '/app.'${TOOL}'.version/ { print $2 }' $APP_PROP | tr -d '\r\n'
		exit
	fi

	# Grails >= 3.0.0
	[ -z "$VERSION" -a -f "$APP_PROP3" ] &&
    	awk -F'=' '/grailsVersion/ { print $2 }' $APP_PROP3 | tr -d '\r\n'
}

build_download_url()
{
	if [ $TOOL_UPPER == 'GRAILS' ]; then
		DOWNLOAD_BASE_URL="https://github.com/grails/grails-core/releases/download/v${VERSION}"
		DOWNLOAD_SUFFIX=".zip"
	else
		DOWNLOAD_BASE_URL="http://dl.bintray.com/content/aalmiray/Griffon"
		DOWNLOAD_SUFFIX="-bin.zip?direct"
	fi
	echo "${DOWNLOAD_BASE_URL}/${TOOL}-${VERSION}${DOWNLOAD_SUFFIX}"
}

# Try to get the version from the command line
TRY_VERSION=$1
if [[ $TRY_VERSION =~ [0-9]\.[0-9]\.[0-9] ]]; then
	VERSION=$TRY_VERSION
	shift
fi

# use wrapper if no version is given and it exists.
#WRAPPER_CMD="${TOOL}w"
if [ -z "$VERSION" -a -f "./$WRAPPER_CMD" ]; then
	echo "Using $WRAPPER_CMD"
	exec ./$WRAPPER_CMD "$@"
	exit
fi

# Or else get the version from the application.properties/gradle.properties
# in the current directory
[ -z "$VERSION" ] &&
	VERSION=`read_app_version`

# Or else use the default version
[ -z "$VERSION" ] &&
	VERSION=$DEFAULT_VERSION

export TOOL_HOME=${BASE_TOOL_PATH}${TOOL}-${VERSION}

# Attempt to download and unzip the specified version if it does not exist
if [ ! -d ${TOOL_HOME} ]; then
        NEW_FILE="${TOOL}-${VERSION}.zip"
        echo "${TOOL_UPPER} ${VERSION} does not exist, attempting to download..."
				echo "Downloading from: `build_download_url`"
        curl -L `build_download_url` -o ${NEW_FILE}
        unzip ./${NEW_FILE} -d ${BASE_TOOL_PATH}/
        rm -r ${NEW_FILE}
        if [ -d ${TOOL_HOME} ]; then
            echo "Got ${TOOL} version $VERSION successfully"
        else
            echo "Failed to get ${TOOL} version $VERSION"
        fi
fi

TOOL_CMD=${TOOL_HOME}/bin/$CMD

if [ ! -x "$TOOL_CMD" ]; then
	echo "Error: $CMD command not found at '$TOOL_CMD'!"
	exit 3
fi

declare "${TOOL_UPPER}_HOME"=$TOOL_HOME

if [ "$1" = "install-version" ]; then
	echo "Version $VERSION installed at ${TOOL_HOME}"
	exit
fi

exec $TOOL_CMD "$@"
